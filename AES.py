import sys
from itertools import product
import random

BLOCK_SIZE = 16

SBOX = [
    0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76,
    0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0,
    0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15,
    0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75,
    0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84,
    0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf,
    0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8,
    0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2,
    0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73,
    0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb,
    0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79,
    0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08,
    0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a,
    0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e,
    0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf,
    0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16
]

INVERSE_SBOX = [
    0x52, 0x09, 0x6a, 0xd5, 0x30, 0x36, 0xa5, 0x38, 0xbf, 0x40, 0xa3, 0x9e, 0x81, 0xf3, 0xd7, 0xfb,
    0x7c, 0xe3, 0x39, 0x82, 0x9b, 0x2f, 0xff, 0x87, 0x34, 0x8e, 0x43, 0x44, 0xc4, 0xde, 0xe9, 0xcb,
    0x54, 0x7b, 0x94, 0x32, 0xa6, 0xc2, 0x23, 0x3d, 0xee, 0x4c, 0x95, 0x0b, 0x42, 0xfa, 0xc3, 0x4e,
    0x08, 0x2e, 0xa1, 0x66, 0x28, 0xd9, 0x24, 0xb2, 0x76, 0x5b, 0xa2, 0x49, 0x6d, 0x8b, 0xd1, 0x25,
    0x72, 0xf8, 0xf6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xd4, 0xa4, 0x5c, 0xcc, 0x5d, 0x65, 0xb6, 0x92,
    0x6c, 0x70, 0x48, 0x50, 0xfd, 0xed, 0xb9, 0xda, 0x5e, 0x15, 0x46, 0x57, 0xa7, 0x8d, 0x9d, 0x84,
    0x90, 0xd8, 0xab, 0x00, 0x8c, 0xbc, 0xd3, 0x0a, 0xf7, 0xe4, 0x58, 0x05, 0xb8, 0xb3, 0x45, 0x06,
    0xd0, 0x2c, 0x1e, 0x8f, 0xca, 0x3f, 0x0f, 0x02, 0xc1, 0xaf, 0xbd, 0x03, 0x01, 0x13, 0x8a, 0x6b,
    0x3a, 0x91, 0x11, 0x41, 0x4f, 0x67, 0xdc, 0xea, 0x97, 0xf2, 0xcf, 0xce, 0xf0, 0xb4, 0xe6, 0x73,
    0x96, 0xac, 0x74, 0x22, 0xe7, 0xad, 0x35, 0x85, 0xe2, 0xf9, 0x37, 0xe8, 0x1c, 0x75, 0xdf, 0x6e,
    0x47, 0xf1, 0x1a, 0x71, 0x1d, 0x29, 0xc5, 0x89, 0x6f, 0xb7, 0x62, 0x0e, 0xaa, 0x18, 0xbe, 0x1b,
    0xfc, 0x56, 0x3e, 0x4b, 0xc6, 0xd2, 0x79, 0x20, 0x9a, 0xdb, 0xc0, 0xfe, 0x78, 0xcd, 0x5a, 0xf4,
    0x1f, 0xdd, 0xa8, 0x33, 0x88, 0x07, 0xc7, 0x31, 0xb1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xec, 0x5f,
    0x60, 0x51, 0x7f, 0xa9, 0x19, 0xb5, 0x4a, 0x0d, 0x2d, 0xe5, 0x7a, 0x9f, 0x93, 0xc9, 0x9c, 0xef,
    0xa0, 0xe0, 0x3b, 0x4d, 0xae, 0x2a, 0xf5, 0xb0, 0xc8, 0xeb, 0xbb, 0x3c, 0x83, 0x53, 0x99, 0x61,
    0x17, 0x2b, 0x04, 0x7e, 0xba, 0x77, 0xd6, 0x26, 0xe1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0c, 0x7d
]

MC_ARRAY = [
    [2, 3, 1, 1],
    [1, 2, 3, 1],
    [1, 1, 2, 3],
    [3, 1, 1, 2],
]

INV_MC_ARRAY = [
    [14, 11, 13, 9],
    [9, 14, 11, 13],
    [13, 9, 14, 11],
    [11, 13, 9, 14],
]

RCON = [1, 2, 4, 8, 16, 32, 64, 128, 27, 54]

NUM_ROUNDS = 10

IV = [[4, 25, 92, 45], [85, 43, 64, 46], [5, 9, 21, 64], [83, 57, 29, 62]]


def main():
    if len(sys.argv) != 2:
        print("Provide right number of arguments!")
        quit()

    # Change hardcoded keys here or set them to be random (make sure to save them for decryption)
    key = [0x54, 0x68, 0x61, 0x74, 0x73, 0x20, 0x6D, 0x79, 0x20, 0x4B, 0x75, 0x6E, 0x67, 0x20, 0x46, 0x75]
    roundkeys = generate_roundkeys(key)

    if sys.argv[1] == 'encrypt':
        message = ''
        message = input("Enter a message: ").encode('ascii')
        # message = 'abchellohellohello'.encode('ascii')

        # Pad the message with number of pad bytes
        if len(message)%BLOCK_SIZE != 0:
            padding = BLOCK_SIZE - len(message)%BLOCK_SIZE  # This is always 14 because we have 18 byte message
            message += padding.to_bytes(1, byteorder='big') * padding
        else:
            message += b'\x10' * 16
        
        # Encrypt the message and write it to ctext
        ciphertext = encrypt(message, roundkeys)
        c_bytes = bytes()
        with open('./ctext', 'wb') as file:
            for i in range(len(ciphertext)):
                for j in range(4):
                    file.write(ciphertext[i][j].to_bytes(1, byteorder='big'))
                    c_bytes += ciphertext[i][j].to_bytes(1, byteorder='big')
        print("Ciphertext: {}".format(c_bytes))

    elif sys.argv[1] == 'decrypt':
        with open('./ctext', 'rb') as file:
            ciphertext = file.read()
            print('Received ciphertext: {}'.format(ciphertext))
            d =  decrypt(ciphertext, roundkeys)
        plaintext = ''.join([chr(d[i//4][i%4]) for i in range(len(d)*4-d[-1][-1])])
        print('Plaintext: {}'.format(plaintext))
    else:
        print('Invalid command')

def encrypt(message, roundkeys):

    # For the first block, XOR with IV
    last_cipher = IV
    final_ciphertext = []
    for part in range(len(message)//BLOCK_SIZE):

        # Convert the message to a 4x4 list of ints
        index_2D = part*BLOCK_SIZE
        block = [[0]*4 for _ in range(4)]
        for i, j in product(range(4), repeat=2):
            block[i][j] = message[index_2D + (i*4+j)]

        # XOR with last cipher
        block = XOR_4x4(block, last_cipher)

        # Add Initial round key
        block = AddRoundKey(block, roundkeys[0])

        # Encrypt each block with 10 rounds in AES-128
        for round in range(1, NUM_ROUNDS+1):
            
            block = SubBytes(block, SBOX)
            block = ShiftRows(block)

            # Mix Columns only if not last round
            if round < NUM_ROUNDS:
                block = MixColumns(block, MC_ARRAY)
            block = AddRoundKey(block, roundkeys[round])

        # Save the encrypted block to XOR next around
        last_cipher = block
        final_ciphertext += block
    return final_ciphertext

def decrypt(ciphertext, roundkeys):

    # For the first block, XOR with IV
    last_cipher = IV
    plaintext = []

    for part in range(len(ciphertext)//BLOCK_SIZE):

        # Read the block into 4x4 int
        index_2D = part*BLOCK_SIZE
        block = [[0]*4 for _ in range(4)]
        for i, j in product(range(4), repeat=2):
            block[i][j] = ciphertext[index_2D + (i*4+j)]

        # Save the cipher for the next block for CBC
        original_cipher_block = block

        # Add Initial Roundkey 
        block = AddRoundKey(block, roundkeys[NUM_ROUNDS])

        for round in range(NUM_ROUNDS-1, -1, -1):

            block = InvShiftRows(block)
            block = SubBytes(block, INVERSE_SBOX)
            block = AddRoundKey(block, roundkeys[round])

            # Inverse Mix Columns only if not last round
            if round > 0:
                block = MixColumns(block, INV_MC_ARRAY)

        block = XOR_4x4(block, last_cipher)
        plaintext += block
        last_cipher = original_cipher_block

    return plaintext

# All subroutines use 4x4 int array
def XOR_4x4(a, b):
    out = [[0]*4 for _ in range(4)]
    for i, j in product(range(4), repeat=2):
        out[i][j] = a[i][j] ^ b[i][j]
    return out

# Substitute bytes in 4x4 list with the given sboxßß
def SubBytes(block, sbox):
    subbed_bytes = [[0]*4 for _ in range(4)]
    for i, j in product(range(4), repeat=2):
        subbed_bytes[i][j] = sbox[(block[i][j]>>4) * BLOCK_SIZE + (block[i][j] & 0xF)]
    return subbed_bytes

# Shift each row left <row #> times
def ShiftRows(block):
    return [block[0]] + [block[i][i:] + block[i][:i] for i in range(1, 4)]

# Shift each row right <row #> times
def InvShiftRows(block):
    return [block[0]] + [block[i][4-i:] + block[i][:4-i] for i in range(1, 4)]

# For each column, find the "dot product"
def MixColumns(block, mc_array):
    mixed_bytes =  [[0]*4 for _ in range(4)]
    for i, j, k in product(range(4), repeat=3):
        mixed_bytes[i][j] ^= galois_mul(mc_array[i][k], block[k][j])
    return mixed_bytes

# XOR the block with the current roundkey
def AddRoundKey(block, roundkey):
    added_bytes = [[0]*4 for _ in range(4)]
    for i, j in product(range(4), repeat=2):
        added_bytes[i][j] = block[i][j] ^ roundkey[i*4+j]
    return added_bytes

def print_block(block):
    for i in range(4):
        print(block[i])

# Generate 10 more roundkeys from the initial roundkey
def generate_roundkeys(key):
    last_key = key
    roundkeys = [key] + [0]*10

    for round in range(NUM_ROUNDS):

        # Transform the first nibble
        subword = [SBOX[(b>>4) * BLOCK_SIZE + (b & 0xF)] for b in (last_key[13:] + last_key[12:13])]
        gw3 = [subword[0] ^ RCON[round]] + subword[1:]

        new_last_key = [0] * 16
        for i in range(16):
            # XOR the last nibble with either the transformed nibble or previous nibbles
            new_last_key[i] = (last_key[i] ^ (gw3[i] if i < 4 else new_last_key[i-4])) & 0xFF

        roundkeys[round+1] = new_last_key
        last_key = new_last_key

    # for key in roundkeys: 
    #     for num in key:
    #         print(format(num, 'X'), end='')
    #     print()

    return roundkeys
 
 # Used in MixColumns
def galois_mul(a, b):
    result = 0
    while a and b:
        if b & 1:
            result ^= a
        a <<= 1
        if a & 0x100:
            a ^= 0x11B
        b >>= 1
    return result

if __name__ == "__main__":
    main()